// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var Course = exports.Course = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Lesson = exports.Lesson = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineCourse()
defineLesson()

function defineCourse () {
  Course.encodingLength = encodingLength
  Course.encode = encode
  Course.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.id)) throw new Error("id is required")
    var len = encodings.float.encodingLength(obj.id)
    length += 1 + len
    if (!defined(obj.name)) throw new Error("name is required")
    var len = encodings.string.encodingLength(obj.name)
    length += 1 + len
    if (defined(obj.lessons)) {
      for (var i = 0; i < obj.lessons.length; i++) {
        if (!defined(obj.lessons[i])) continue
        var len = Lesson.encodingLength(obj.lessons[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.id)) throw new Error("id is required")
    buf[offset++] = 13
    encodings.float.encode(obj.id, buf, offset)
    offset += encodings.float.encode.bytes
    if (!defined(obj.name)) throw new Error("name is required")
    buf[offset++] = 18
    encodings.string.encode(obj.name, buf, offset)
    offset += encodings.string.encode.bytes
    if (defined(obj.lessons)) {
      for (var i = 0; i < obj.lessons.length; i++) {
        if (!defined(obj.lessons[i])) continue
        buf[offset++] = 26
        varint.encode(Lesson.encodingLength(obj.lessons[i]), buf, offset)
        offset += varint.encode.bytes
        Lesson.encode(obj.lessons[i], buf, offset)
        offset += Lesson.encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      id: 0,
      name: "",
      lessons: []
    }
    var found0 = false
    var found1 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.id = encodings.float.decode(buf, offset)
        offset += encodings.float.decode.bytes
        found0 = true
        break
        case 2:
        obj.name = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found1 = true
        break
        case 3:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.lessons.push(Lesson.decode(buf, offset, offset + len))
        offset += Lesson.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineLesson () {
  Lesson.encodingLength = encodingLength
  Lesson.encode = encode
  Lesson.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.id)) throw new Error("id is required")
    var len = encodings.float.encodingLength(obj.id)
    length += 1 + len
    if (!defined(obj.title)) throw new Error("title is required")
    var len = encodings.string.encodingLength(obj.title)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.id)) throw new Error("id is required")
    buf[offset++] = 13
    encodings.float.encode(obj.id, buf, offset)
    offset += encodings.float.encode.bytes
    if (!defined(obj.title)) throw new Error("title is required")
    buf[offset++] = 18
    encodings.string.encode(obj.title, buf, offset)
    offset += encodings.string.encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      id: 0,
      title: ""
    }
    var found0 = false
    var found1 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.id = encodings.float.decode(buf, offset)
        offset += encodings.float.decode.bytes
        found0 = true
        break
        case 2:
        obj.title = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found1 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
